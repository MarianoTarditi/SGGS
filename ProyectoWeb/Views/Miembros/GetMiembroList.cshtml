@model List<VMMiembro>

@{
    ViewData["Title"] = "GetMiembroList";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-table@1.23.5/dist/bootstrap-table.min.css">

<script src="https://cdn.jsdelivr.net/npm/tableexport.jquery.plugin@1.29.0/tableExport.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap-table@1.23.5/dist/bootstrap-table.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap-table@1.23.5/dist/bootstrap-table-locale-all.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap-table@1.23.5/dist/extensions/export/bootstrap-table-export.min.js"></script>

<style>
    .select,
    #locale {
        width: 100%;
    }

    .like {
        margin-right: 10px;
    }

    .action-buttons {
        display: flex;
        justify-content: center; /* Centrar los botones horizontalmente */
    }

        .action-buttons a {
            margin: 0 5px; /* Espacio entre los botones */
            min-width: 80px; /* Ancho mínimo para los botones */
            text-align: center; /* Alineación centrada del texto en el botón */
        }

    td {
        text-align: center; /* Centrar el contenido de la celda */
    }

        th[data-field="acciones"], td[data-field="acciones"] {
            width: 150px; /* Ajusta este valor según sea necesario */
            min-width: 150px; /* Asegura que la columna no sea más pequeña que este valor */
        }

    .pagetitle {
        margin-bottom: -52px;
    }

    .button-container {
        display: flex;
        justify-content: flex-start; /* Alinear a la izquierda */
        margin-bottom: 10px; /* Espacio debajo del botón */
    }
</style>

<div class="pagetitle">
    <h1>Miembros</h1>
    <nav>
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="index.html">Home</a></li>
            <li class="breadcrumb-item active">Lista de Miembros</li>
        </ol>
    </nav>
</div><!-- End Page Title -->

<table id="table"
       data-id-field="Id"
       data-search="true"
       data-show-refresh="true"
       data-show-toggle="true"
       data-show-fullscreen="true"
       data-show-columns="true"
       data-show-columns-toggle-all="true"
       data-detail-view="true"
       data-show-export="true"
       data-click-to-select="true"
       data-detail-formatter="detailFormatter"
       data-minimum-count-columns="2"
       data-show-pagination-switch="true"
       data-pagination="true"
       data-page-list="[10, 25, 50, 100, all]"
       data-show-footer="true"
       data-side-pagination="client">
    <thead>
        <tr>
            <th data-field="id" data-visible="false">ID</th> <!-- Columna ID oculta -->
            <th data-field="nombre" data-sortable="true">Nombre</th>
            <th data-field="apellido" data-sortable="true">Apellido</th>
            <th data-field="dni" data-sortable="true">Dni</th>
            <th data-field="categoria" data-sortable="true">Catégoria</th>
            <th data-field="telefono" data-sortable="true">Teléfono</th>
            <th data-field="localidad" data-sortable="true">Localidad</th>
            <th data-field="deuda" data-sortable="true">Vencimiento Deuda</th>
            <th data-field="acciones" data-formatter="operateFormatter">Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.Nombre</td>
                <td>@item.Apellido</td>
                <td><span class="badge border-primary border-2 text-primary" style="font-size: 15px">@item.Dni</span></td>
                <td><span class="badge bg-secondary">@item.Categoria.Nombre</span></td>
                <td>@item.Telefono</td>
                <td>@item.Localidad.Nombre</td>
                <td>@item.Deuda.FechaVencimiento</td>
                
                <td class="action-buttons">
                    <a asp-area="Admin" asp-controller="Miembros" asp-action="GetMiembro" asp-route-id="@item.Id" class="btn btn-success btn-sm">Ver</a>
                    <a asp-area="Admin" asp-controller="Miembros" asp-action="AddMiembro" asp-route-id="@item.Id" class="btn btn-info btn-sm">Modificar</a>
                    <a asp-area="Admin" asp-controller="Miembros" asp-action="DeleteMiembro" asp-route-id="@item.Id" class="btn btn-danger btn-sm">Eliminar</a>
                </td>
            </tr>
        }
    </tbody>
</table>

<td><a asp-area="Admin" asp-controller="Miembros" asp-action="AddMiembro" class="btn btn-success"> Agregar </a></td>
<td><button id="btnExportPdf" class="btn btn-danger">Exportar PDF</button></td>

<div class="pagetitle text-center" style="padding-top: 30px">
    <h1>Reportes de Miembros</h1>
</div>

<div class="row" style="margin-top: 80px">
    <div class="col-lg-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Miembros por Categoría</h5>

                <!-- Donut Chart -->
                <div id="donutChartCategorias" style="min-height: 400px;" class="echart"></div>
                <!-- End Donut Chart -->

            </div>
        </div>
    </div>

    <div class="col-lg-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Protagonista por Rama</h5>

                <!-- Donut Chart -->
                <div id="donutChart" style="min-height: 400px;" class="echart"></div>
                <!-- End Donut Chart -->

            </div>
        </div>
    </div>

    <div class="col-lg-4">
        <div class="card">
            <div class="card-body">
                <h5 class="card-title">Educadores con Insignia de Madera</h5>

                <!-- Donut Chart -->
                <div id="insigniaChart" style="min-height: 400px;" class="echart"></div>
                <!-- End Donut Chart -->

            </div>
        </div>
    </div>
</div>




<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.28/jspdf.plugin.autotable.min.js"></script>


<script>
    var $table = $('#table');
    var $remove = $('#remove');
    var selections = [];

    function getIdSelections() {
        return $.map($table.bootstrapTable('getSelections'), function (row) {
            return row.id;
        });
    }

    function operateFormatter(value, row, index) {
        return [
            '<div class="action-buttons">',
            '<a class="btn btn-success btn-sm" href="/Miembros/GetMiembro?id=' + row.id + '"><i class="bi bi-eye-fill"></i></a> ',
            '<a class="btn btn-primary btn-sm" href="/Miembros/AddMiembro?id=' + row.id + '"><i class="bi bi-pencil-square"></i></a> ',
            '<a class="btn btn-danger btn-sm" href="/Miembros/DeleteMiembro?id=' + row.id + '"><i class="bi bi-trash3"></i></a>',
            '</div>'
        ].join('');
    }

    function initTable() {
        $table.bootstrapTable({
            locale: 'es-ES' // Establecer el idioma por defecto directamente
        });
    }

    $(function () {
        initTable();
    });



                     document.getElementById("btnExportPdf").addEventListener("click", function () {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF("p", "mm", "a4");

        // Fecha y hora actual
        const fechaActual = new Date().toLocaleDateString();
        const horaActual = new Date().toLocaleTimeString();

        // **Título**
        doc.setFont("helvetica", "bold");
        doc.setFontSize(16);
        doc.setTextColor(40, 40, 40);
        doc.text("Reporte de Miembros", 105, 15, { align: "center" });

        // **Línea decorativa**
        doc.setDrawColor(0, 0, 0);
        doc.line(14, 20, 196, 20);

        // **Fecha de exportación**
        doc.setFontSize(10);
        doc.setFont("helvetica", "italic");
        doc.setTextColor(100, 100, 100);
        doc.text(`Fecha de exportación: ${fechaActual} - ${horaActual}`, 14, 26);

        let startY = 35; // Posición inicial

        // **Tabla: Listado de Miembros (AHORA APARECE PRIMERO)**
        doc.setFont("helvetica", "bold");
        doc.setFontSize(12);
        doc.text("Listado de Miembros", 14, startY);

        // **Obtener datos de la tabla HTML sin la columna "Acciones"**
        const table = document.getElementById("table");
        const headers = [];
        const data = [];

        // Extraer encabezados (EXCLUYENDO "Acciones")
        table.querySelectorAll("thead th").forEach((th, index) => {
            if (th.innerText.trim() !== "Acciones") { // Ignorar columna "Acciones"
                headers.push(th.innerText);
            }
        });

        // Extraer filas sin la columna "Acciones"
        table.querySelectorAll("tbody tr").forEach(tr => {
            const rowData = [];
            tr.querySelectorAll("td").forEach((td, index) => {
                if (table.querySelector("thead th").children[index]?.innerText.trim() !== "Acciones") {
                    rowData.push(td.innerText);
                }
            });
            data.push(rowData);
        });

        // **Generar tabla en el PDF**
        doc.autoTable({
            startY: startY + 5,
            head: [headers],
            body: data,
            theme: 'grid',
            styles: { fontSize: 9, cellPadding: 2, valign: 'middle' },
            headStyles: { fillColor: [52, 73, 94], textColor: [255, 255, 255] },
            alternateRowStyles: { fillColor: [240, 240, 240] },
            margin: { top: 25, left: 10, right: 10 }
        });

        // **Obtener los datos del ViewBag**
        const categoriaCount = @Html.Raw(Json.Serialize(ViewBag.CategoriaCount));
        const ramasCount = @Html.Raw(Json.Serialize(ViewBag.RamasCount));
        const miembroInsigniasCount = @Html.Raw(Json.Serialize(ViewBag.MiembroInsigniasCount));

        startY = doc.lastAutoTable.finalY + 10;

        // **Tabla: Miembros por Categoría**
        doc.setFont("helvetica", "bold");
        doc.setFontSize(12);
        doc.text("Miembros por Categoría", 14, startY);
        doc.autoTable({
            startY: startY + 5,
            head: [["Categoría", "Cantidad"]],
            body: Object.entries(categoriaCount),
            theme: "grid",
            headStyles: { fillColor: [41, 128, 185], textColor: [255, 255, 255] },
            styles: { fontSize: 10 },
            margin: { left: 14, right: 14 }
        });

        // **Tabla: Protagonistas por Rama**
        startY = doc.lastAutoTable.finalY + 10;
        doc.text("Protagonista por Rama", 14, startY);
        doc.autoTable({
            startY: startY + 5,
            head: [["Rama", "Cantidad"]],
            body: Object.entries(ramasCount),
            theme: "grid",
            headStyles: { fillColor: [39, 174, 96], textColor: [255, 255, 255] },
            styles: { fontSize: 10 },
            margin: { left: 14, right: 14 }
        });

        // **Tabla: Educadores con Insignia de Madera**
        startY = doc.lastAutoTable.finalY + 10;
        doc.text("Educadores con Insignia de Madera", 14, startY);
        doc.autoTable({
            startY: startY + 5,
            head: [["Estado", "Cantidad"]],
            body: Object.entries(miembroInsigniasCount),
            theme: "grid",
            headStyles: { fillColor: [231, 76, 60], textColor: [255, 255, 255] },
            styles: { fontSize: 10 },
            margin: { left: 14, right: 14 }
        });

        // **Pie de página con número de páginas**
        const pageCount = doc.internal.getNumberOfPages();
        for (let i = 1; i <= pageCount; i++) {
            doc.setPage(i);
            doc.setFontSize(9);
            doc.setTextColor(100, 100, 100);
            doc.text(`Página ${i} de ${pageCount}`, 105, 287, { align: "center" });
        }

        // **Descargar el PDF**
        doc.save(`ListaMiembros_${fechaActual}.pdf`);
    });





     document.addEventListener("DOMContentLoaded", () => {
            // Obtener datos desde ViewBag y convertirlos en formato adecuado
            var ramasData = @Html.Raw(Json.Serialize(ViewBag.RamasCount));

            var chartData = Object.keys(ramasData).map(rama => ({
                name: rama,
                value: ramasData[rama]
            }));

            // Inicializar gráfico con datos dinámicos
            echarts.init(document.querySelector("#donutChart")).setOption({
                tooltip: { trigger: 'item' },
                legend: { top: '5%', left: 'center' },
                series: [{
                    name: 'Miembros por Rama (Protagonistas)',
                    type: 'pie',
                    radius: ['40%', '70%'],
                    avoidLabelOverlap: false,
                    label: { show: false, position: 'center' },
                    emphasis: { label: { show: true, fontSize: '18', fontWeight: 'bold' }},
                    labelLine: { show: false },
                    data: chartData
                }]
            });
     });
   
       document.addEventListener("DOMContentLoaded", () => {
            // Obtener datos desde ViewBag y convertirlos en formato adecuado
            var categoriasData = @Html.Raw(Json.Serialize(ViewBag.CategoriaCount));

            var chartData = Object.keys(categoriasData).map(categoria => ({
                name: categoria,
                value: categoriasData[categoria]
            }));

            // Inicializar gráfico con datos dinámicos
            echarts.init(document.querySelector("#donutChartCategorias")).setOption({
                tooltip: { trigger: 'item' },
                legend: { top: '5%', left: 'center' },
                series: [{
                    name: 'Miembros por Categoría',
                    type: 'pie',
                    radius: ['40%', '70%'],
                    avoidLabelOverlap: false,
                    label: { show: false, position: 'center' },
                    emphasis: { label: { show: true, fontSize: '18', fontWeight: 'bold' }},
                    labelLine: { show: false },
                    data: chartData
                }]
            });
       });

           document.addEventListener("DOMContentLoaded", () => {
            var insigniaData = @Html.Raw(Json.Serialize(ViewBag.MiembroInsigniasCount));

            var chartData = Object.keys(insigniaData).map(tipo => ({
                name: tipo,
                value: insigniaData[tipo]
            }));

            echarts.init(document.querySelector("#insigniaChart")).setOption({
                tooltip: { trigger: 'item' },
                legend: { top: '5%', left: 'center' },
                series: [{
                    name: 'Educadores con Insignia de Madera',
                    type: 'pie',
                    radius: ['40%', '70%'],
                    avoidLabelOverlap: false,
                    label: { show: false, position: 'center' },
                    emphasis: { label: { show: true, fontSize: '18', fontWeight: 'bold' }},
                    labelLine: { show: false },
                    data: chartData
                }]
            });
        });
   
</script>
