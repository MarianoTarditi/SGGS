// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(dbContext))]
    [Migration("20241128013247_sdaajjfadaa")]
    partial class sdaajjfadaa
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.Identity.Entities.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9b67832b-7091-48e8-aa0a-f1b3baeca418",
                            ConcurrencyStamp = "5f316902-1737-4698-8136-a2d60e0eb72c",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "affedc34-9713-423a-880e-4a61ceefb7b1",
                            ConcurrencyStamp = "8286ebc1-e78f-4bcb-bc9b-54a47c00de91",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("Entity.Identity.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "070a9212-d4a9-44da-8479-4ec813b63621",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d782067-a169-4463-b2af-a1a57892ef7f",
                            Email = "test.video.lesson@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST.VIDEO.LESSON@GMAIL.COM",
                            NormalizedUserName = "TESTADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOtfJpXin7WiVCFEcTgbqfE92G6vMFGWkwtWrfRsZeOejJaKtlEaNr7NIz4tPdFaDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "238e61b5-5ddd-4b8b-a7f3-f79fe7fb28f5",
                            TwoFactorEnabled = false,
                            UserName = "TestAdmin"
                        },
                        new
                        {
                            Id = "6b0e483c-ebae-4ed3-827e-8ed27f7d9131",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d910dada-848e-4a74-9351-426155bc58cb",
                            Email = "test.video.lesson2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST.VIDEO.LESSON2@GMAIL.COM",
                            NormalizedUserName = "TESTMEMBER",
                            PasswordHash = "AQAAAAIAAYagAAAAECwrxYC6qkupJ67DDAafW4aurq2pKb9aSiHrkUvCOfsS4xxNQD6YSsgbFsk1EhzZqg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f90ab6be-3e58-4250-b361-be4b3a7dc44f",
                            TwoFactorEnabled = false,
                            UserName = "TestMember"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Asociacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AsociacionNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ValorAfiliacion")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorSeguro")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Asociaciones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AsociacionNombre = "ScoutsArgentina",
                            ValorAfiliacion = 1000m,
                            ValorSeguro = 2000m
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.AutorizacionPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Autorizado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("PagoId")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PagoId")
                        .IsUnique();

                    b.HasIndex("UsuarioId");

                    b.ToTable("AutorizacionesPagos");

                    b.HasData(
                        new
                        {
                            Id = 1096,
                            Autorizado = false,
                            Fecha = new DateTime(2024, 11, 27, 22, 32, 46, 708, DateTimeKind.Local).AddTicks(9523),
                            PagoId = 1,
                            UsuarioId = 1
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Monto")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.CategoriaPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoriaNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CategoriaPago");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaNombre = "asd"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.DetallePago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaPagoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Monto")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Pagoid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaPagoId");

                    b.HasIndex("Pagoid");

                    b.ToTable("DetallesPagos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaPagoId = 1,
                            Monto = 1000m,
                            Pagoid = 1
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Deuda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("MiembroId")
                        .HasColumnType("int");

                    b.Property<decimal>("MontoAfiliacion")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontoSeguroAcompañante")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Tiene")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("MiembroId")
                        .IsUnique();

                    b.ToTable("Deudas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaVencimiento = new DateTime(2024, 11, 27, 22, 32, 46, 708, DateTimeKind.Local).AddTicks(8769),
                            MiembroId = 1,
                            MontoAfiliacion = 10000m,
                            MontoSeguroAcompañante = 5000m,
                            Tiene = true
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Discapacidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Discapacidades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Diselxia"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Educador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FuncionEducador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InsigniaMadera")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Educadores");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.EstadoCivil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EstadoCivil");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Masculino"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Femenino"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "X"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Estudio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Estudio");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nivel = "asd"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Evento.AutorizacionEvento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Autorizado")
                        .HasColumnType("bit");

                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventoId")
                        .IsUnique();

                    b.HasIndex("UsuarioId");

                    b.ToTable("AutorizacionesEventos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Autorizado = false,
                            EventoId = 1,
                            Fecha = new DateTime(2024, 11, 27, 22, 32, 46, 708, DateTimeKind.Local).AddTicks(9490),
                            UsuarioId = 1
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Evento.DestacamientoPolicial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Telefono")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("DestacamientosPoliciales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Direccion = "Dardo rocha 78",
                            Nombre = "PoliciaRojas",
                            Telefono = 2445445.0
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Evento.Evento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<double?>("Celular")
                        .HasColumnType("float");

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<int>("DestacamientoPolicialId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaLlegada")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaSalida")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraLlegada")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("HoraSalida")
                        .HasColumnType("datetime2");

                    b.Property<int>("JefeDeCampoId")
                        .HasColumnType("int");

                    b.Property<int>("LocacionId")
                        .HasColumnType("int");

                    b.Property<string>("NombreDirecZona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Telefono")
                        .HasColumnType("float");

                    b.Property<int>("TransportePrivdadoId")
                        .HasColumnType("int");

                    b.Property<int>("UnidadSanitariaId")
                        .HasColumnType("int");

                    b.Property<int>("VehiculoPropioId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestacamientoPolicialId");

                    b.HasIndex("JefeDeCampoId");

                    b.HasIndex("LocacionId");

                    b.HasIndex("TransportePrivdadoId");

                    b.HasIndex("UnidadSanitariaId");

                    b.HasIndex("VehiculoPropioId");

                    b.ToTable("Eventos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Celular = 2474403379.0,
                            Codigo = 1,
                            DestacamientoPolicialId = 1,
                            Fecha = new DateTime(2024, 11, 27, 22, 32, 46, 708, DateTimeKind.Local).AddTicks(9809),
                            FechaLlegada = new DateTime(2024, 11, 27, 22, 32, 46, 708, DateTimeKind.Local).AddTicks(9810),
                            FechaSalida = new DateTime(2024, 11, 27, 22, 32, 46, 708, DateTimeKind.Local).AddTicks(9811),
                            HoraLlegada = new DateTime(2024, 11, 27, 22, 32, 46, 708, DateTimeKind.Local).AddTicks(9813),
                            HoraSalida = new DateTime(2024, 11, 27, 22, 32, 46, 708, DateTimeKind.Local).AddTicks(9813),
                            JefeDeCampoId = 1,
                            LocacionId = 1,
                            NombreDirecZona = "sad",
                            Telefono = 0.0,
                            TransportePrivdadoId = 1,
                            UnidadSanitariaId = 1,
                            VehiculoPropioId = 1
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Evento.EventoMiembro", b =>
                {
                    b.Property<int>("MiembroId")
                        .HasColumnType("int");

                    b.Property<int>("EventoId")
                        .HasColumnType("int");

                    b.HasKey("MiembroId", "EventoId");

                    b.HasIndex("EventoId");

                    b.ToTable("EventosMiembros");

                    b.HasData(
                        new
                        {
                            MiembroId = 1,
                            EventoId = 1
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Evento.Locacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Ciudad")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PropietarioId")
                        .HasColumnType("int");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PropietarioId");

                    b.ToTable("Locaciones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ciudad = "Rojas",
                            Direccion = "Dardo rocha 78",
                            PropietarioId = 1,
                            Provincia = "Buenos Aires"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Evento.Propietario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Telefono")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Propietarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Ernesto",
                            Telefono = 2445445.0
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Evento.TransportePrivado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroHabilitacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Telefono")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("TransportesPrivados");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Direccion = "Dardo rocha 78",
                            NumeroHabilitacion = "542",
                            RazonSocial = "45",
                            Telefono = 2445445.0
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Evento.UnidadSanitaria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Telefono")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("UnidadesSanitarias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Direccion = "Dardo rocha 78",
                            Nombre = "HospitalRojas",
                            Telefono = 2445445.0
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Evento.VehiculoPropio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patente")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("VechiculosPropios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Marca = "Ford",
                            Modelo = "Fiesta",
                            Patente = "IAA344",
                            Tipo = "GEF"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Funcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Funciones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Protagonista"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Idioma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Idiomas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Español"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Localidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("Localidades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = 1,
                            Nombre = "Rojas",
                            ProvinciaId = 1
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Miembro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CodigoPostal")
                        .HasColumnType("int");

                    b.Property<string>("DescripcionDiscapacidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscapacidadId")
                        .HasColumnType("int");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstadoCivilId")
                        .HasColumnType("int");

                    b.Property<int>("EstudioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("FuncionId")
                        .HasColumnType("int");

                    b.Property<int>("IdiomaId")
                        .HasColumnType("int");

                    b.Property<int>("LocalidadId")
                        .HasColumnType("int");

                    b.Property<int>("NacionalidadId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganismoId")
                        .HasColumnType("int");

                    b.Property<int>("RamaId")
                        .HasColumnType("int");

                    b.Property<int>("ReligionId")
                        .HasColumnType("int");

                    b.Property<int>("SexoId")
                        .HasColumnType("int");

                    b.Property<double?>("Telefono")
                        .HasColumnType("float");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DiscapacidadId");

                    b.HasIndex("EstadoCivilId");

                    b.HasIndex("EstudioId");

                    b.HasIndex("FuncionId");

                    b.HasIndex("IdiomaId");

                    b.HasIndex("LocalidadId");

                    b.HasIndex("NacionalidadId");

                    b.HasIndex("OrganismoId");

                    b.HasIndex("RamaId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("SexoId");

                    b.ToTable("Miembros");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Apellido = "Martinez",
                            CodigoPostal = 2705,
                            DiscapacidadId = 1,
                            Dni = "45621359",
                            Email = "marianotarditi2004@gmail.com",
                            EstadoCivilId = 1,
                            EstudioId = 1,
                            FechaNacimiento = new DateTime(2024, 11, 27, 22, 32, 46, 708, DateTimeKind.Local).AddTicks(8816),
                            FuncionId = 1,
                            IdiomaId = 1,
                            LocalidadId = 1,
                            NacionalidadId = 1,
                            Nombre = "Lautaro",
                            OrganismoId = 1,
                            RamaId = 1,
                            ReligionId = 1,
                            SexoId = 1
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.ModalidadPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaDePago")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PagoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PagoId")
                        .IsUnique();

                    b.ToTable("PagoModalidad", (string)null);

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaDePago = new DateTime(2024, 11, 27, 22, 32, 46, 708, DateTimeKind.Local).AddTicks(9201),
                            NombreCompleto = "Mariano Tarditi",
                            Observacion = "Pago hecho con transferencia",
                            PagoId = 1
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Nacionalidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nacionalidades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Pais = "Argentina"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Organismo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("AsociacionId")
                        .HasColumnType("int");

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<int>("CodigoPostal")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocalidadId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AsociacionId");

                    b.HasIndex("LocalidadId");

                    b.ToTable("Organismos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            AsociacionId = 1,
                            Codigo = 1,
                            CodigoPostal = 2705,
                            Descripcion = "Grupo Scout de Entre Rios",
                            Direccion = "Dardo rocha 78",
                            FechaCreacion = new DateTime(2024, 11, 27, 22, 32, 46, 708, DateTimeKind.Local).AddTicks(9292),
                            LocalidadId = 1,
                            Nombre = "San isidrio labrador"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<int>("MiembroId")
                        .HasColumnType("int");

                    b.Property<int>("ResumenId")
                        .HasColumnType("int");

                    b.Property<string>("TipoModalidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MiembroId");

                    b.HasIndex("ResumenId");

                    b.ToTable("Pagos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Codigo = 1,
                            MiembroId = 1,
                            ResumenId = 1,
                            TipoModalidad = "Efectivo",
                            Total = 10000m
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Provincia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Provincias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Buenos Aires"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Buenos Aires-GBA"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Catamarca"
                        },
                        new
                        {
                            Id = 4,
                            Nombre = "Chaco"
                        },
                        new
                        {
                            Id = 5,
                            Nombre = "Chubut"
                        },
                        new
                        {
                            Id = 6,
                            Nombre = "Córdoba"
                        },
                        new
                        {
                            Id = 7,
                            Nombre = "Corrientes"
                        },
                        new
                        {
                            Id = 8,
                            Nombre = "Entre Ríos"
                        },
                        new
                        {
                            Id = 9,
                            Nombre = "Formosa"
                        },
                        new
                        {
                            Id = 10,
                            Nombre = "Jujuy"
                        },
                        new
                        {
                            Id = 11,
                            Nombre = "La Pampa"
                        },
                        new
                        {
                            Id = 12,
                            Nombre = "La Rioja"
                        },
                        new
                        {
                            Id = 13,
                            Nombre = "Mendoza"
                        },
                        new
                        {
                            Id = 14,
                            Nombre = "Misiones"
                        },
                        new
                        {
                            Id = 15,
                            Nombre = "Neuquén"
                        },
                        new
                        {
                            Id = 16,
                            Nombre = "Río Negro"
                        },
                        new
                        {
                            Id = 17,
                            Nombre = "Salta"
                        },
                        new
                        {
                            Id = 18,
                            Nombre = "San Juan"
                        },
                        new
                        {
                            Id = 19,
                            Nombre = "San Luis"
                        },
                        new
                        {
                            Id = 20,
                            Nombre = "Santa Cruz"
                        },
                        new
                        {
                            Id = 21,
                            Nombre = "Santa Fe"
                        },
                        new
                        {
                            Id = 22,
                            Nombre = "Santiago del Estero"
                        },
                        new
                        {
                            Id = 23,
                            Nombre = "Tierra del Fuego"
                        },
                        new
                        {
                            Id = 24,
                            Nombre = "Tucumán"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Rama", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rama");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "sad"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Recibo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PagoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("PagoId")
                        .IsUnique()
                        .HasFilter("[PagoId] IS NOT NULL");

                    b.ToTable("Recibos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = 1012,
                            Fecha = new DateTime(2024, 11, 27, 22, 32, 46, 708, DateTimeKind.Local).AddTicks(9027),
                            PagoId = 1,
                            Total = 3000m
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Religiones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Cristiano"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Resumen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Credito")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Debito")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrganismoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Saldo")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrganismoId")
                        .IsUnique();

                    b.ToTable("Resumen");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Credito = 1000m,
                            Debito = 500m,
                            OrganismoId = 1,
                            Saldo = 100m
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Sexo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sexos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Masculino"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Clave")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Telefono")
                        .HasColumnType("int");

                    b.Property<int>("UsuarioRolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioRolId");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Clave = "123",
                            Email = "fdsf",
                            EsActivo = true,
                            Nombre = "Jorge",
                            Telefono = 45454,
                            UsuarioRolId = 1
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.UsuarioRol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EsActivo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "fdsfd",
                            EsActivo = true,
                            FechaRegistro = new DateTime(2024, 11, 27, 22, 32, 46, 708, DateTimeKind.Local).AddTicks(9361)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUserClaim<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUserRole<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Deposito", b =>
                {
                    b.HasBaseType("Entity.WebAplication.Entities.ModalidadPago");

                    b.Property<string>("NumeroCuenta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroOperacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroSucursal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ModalidadDeposito", (string)null);
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Efectivo", b =>
                {
                    b.HasBaseType("Entity.WebAplication.Entities.ModalidadPago");

                    b.ToTable("ModalidadEfectivo", (string)null);
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Transferencia", b =>
                {
                    b.HasBaseType("Entity.WebAplication.Entities.ModalidadPago");

                    b.Property<string>("BancoOrigen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NroCuentaOrigenFondo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroOperacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ModalidadTransferencia", (string)null);
                });

            modelBuilder.Entity("Entity.Identity.Entities.AppUserClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>");

                    b.HasDiscriminator().HasValue("AppUserClaim");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "AdminObserverExpireDate",
                            ClaimValue = "06/11/2023",
                            UserId = "6b0e483c-ebae-4ed3-827e-8ed27f7d9131"
                        });
                });

            modelBuilder.Entity("Entity.Identity.Entities.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasDiscriminator().HasValue("AppUserRole");

                    b.HasData(
                        new
                        {
                            UserId = "070a9212-d4a9-44da-8479-4ec813b63621",
                            RoleId = "9b67832b-7091-48e8-aa0a-f1b3baeca418"
                        },
                        new
                        {
                            UserId = "6b0e483c-ebae-4ed3-827e-8ed27f7d9131",
                            RoleId = "affedc34-9713-423a-880e-4a61ceefb7b1"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.AutorizacionPago", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Pago", "Pago")
                        .WithOne("Autorizacion")
                        .HasForeignKey("Entity.WebAplication.Entities.AutorizacionPago", "PagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Usuario", "Usuario")
                        .WithMany("AutorizacionesPagos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pago");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.DetallePago", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.CategoriaPago", "CategoriaPago")
                        .WithMany("ListaDetallesPagos")
                        .HasForeignKey("CategoriaPagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Pago", "Pago")
                        .WithMany("ListaDetalles")
                        .HasForeignKey("Pagoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriaPago");

                    b.Navigation("Pago");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Deuda", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Miembro", "Miembro")
                        .WithOne("Deuda")
                        .HasForeignKey("Entity.WebAplication.Entities.Deuda", "MiembroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Miembro");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Evento.AutorizacionEvento", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Evento.Evento", "Evento")
                        .WithOne("Autorizacion")
                        .HasForeignKey("Entity.WebAplication.Entities.Evento.AutorizacionEvento", "EventoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Usuario", "Usuario")
                        .WithMany("AutorizacionesEventos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Evento.Evento", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Evento.DestacamientoPolicial", "DestacamientoPolicial")
                        .WithMany()
                        .HasForeignKey("DestacamientoPolicialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Miembro", "JefeDeCampo")
                        .WithMany()
                        .HasForeignKey("JefeDeCampoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Evento.Locacion", "Locacion")
                        .WithMany()
                        .HasForeignKey("LocacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Evento.TransportePrivado", "TransportePrivdado")
                        .WithMany()
                        .HasForeignKey("TransportePrivdadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Evento.UnidadSanitaria", "UnidadSanitaria")
                        .WithMany()
                        .HasForeignKey("UnidadSanitariaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Evento.VehiculoPropio", "VehiculoPropio")
                        .WithMany()
                        .HasForeignKey("VehiculoPropioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestacamientoPolicial");

                    b.Navigation("JefeDeCampo");

                    b.Navigation("Locacion");

                    b.Navigation("TransportePrivdado");

                    b.Navigation("UnidadSanitaria");

                    b.Navigation("VehiculoPropio");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Evento.EventoMiembro", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Evento.Evento", "Evento")
                        .WithMany("EventosMiembros")
                        .HasForeignKey("EventoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Miembro", "Miembro")
                        .WithMany("EventosMiembros")
                        .HasForeignKey("MiembroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Miembro");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Evento.Locacion", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Evento.Propietario", "Propietario")
                        .WithMany("Locacion")
                        .HasForeignKey("PropietarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Propietario");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Localidad", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Provincia", "Provincia")
                        .WithMany("Localidades")
                        .HasForeignKey("ProvinciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Miembro", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Discapacidad", "Discapacidad")
                        .WithMany()
                        .HasForeignKey("DiscapacidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.EstadoCivil", "EstadoCivil")
                        .WithMany()
                        .HasForeignKey("EstadoCivilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Estudio", "Estudio")
                        .WithMany()
                        .HasForeignKey("EstudioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Funcion", "Funcion")
                        .WithMany()
                        .HasForeignKey("FuncionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Idioma", "Idioma")
                        .WithMany()
                        .HasForeignKey("IdiomaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Localidad", "Localidad")
                        .WithMany()
                        .HasForeignKey("LocalidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Nacionalidad", "Nacionalidad")
                        .WithMany()
                        .HasForeignKey("NacionalidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Organismo", "Organismo")
                        .WithMany("Miembros")
                        .HasForeignKey("OrganismoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Rama", "Rama")
                        .WithMany()
                        .HasForeignKey("RamaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Sexo", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discapacidad");

                    b.Navigation("EstadoCivil");

                    b.Navigation("Estudio");

                    b.Navigation("Funcion");

                    b.Navigation("Idioma");

                    b.Navigation("Localidad");

                    b.Navigation("Nacionalidad");

                    b.Navigation("Organismo");

                    b.Navigation("Rama");

                    b.Navigation("Religion");

                    b.Navigation("Sexo");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.ModalidadPago", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Pago", "Pago")
                        .WithOne("ModalidadPago")
                        .HasForeignKey("Entity.WebAplication.Entities.ModalidadPago", "PagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pago");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Organismo", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Asociacion", "Asociacion")
                        .WithMany("Organismos")
                        .HasForeignKey("AsociacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Localidad", "Localidad")
                        .WithMany("Organismos")
                        .HasForeignKey("LocalidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asociacion");

                    b.Navigation("Localidad");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Pago", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Miembro", "Miembro")
                        .WithMany("Pagos")
                        .HasForeignKey("MiembroId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Resumen", "Resumen")
                        .WithMany("Pagos")
                        .HasForeignKey("ResumenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Miembro");

                    b.Navigation("Resumen");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Recibo", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Pago", "Pago")
                        .WithOne("Recibo")
                        .HasForeignKey("Entity.WebAplication.Entities.Recibo", "PagoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Pago");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Resumen", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Organismo", "Organismo")
                        .WithOne("Resumen")
                        .HasForeignKey("Entity.WebAplication.Entities.Resumen", "OrganismoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organismo");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Usuario", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.UsuarioRol", "Rol")
                        .WithMany("Listausuarios")
                        .HasForeignKey("UsuarioRolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Entity.Identity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entity.Identity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entity.Identity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Entity.Identity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Identity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entity.Identity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Deposito", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.ModalidadPago", null)
                        .WithOne()
                        .HasForeignKey("Entity.WebAplication.Entities.Deposito", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Efectivo", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.ModalidadPago", null)
                        .WithOne()
                        .HasForeignKey("Entity.WebAplication.Entities.Efectivo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Transferencia", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.ModalidadPago", null)
                        .WithOne()
                        .HasForeignKey("Entity.WebAplication.Entities.Transferencia", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Asociacion", b =>
                {
                    b.Navigation("Organismos");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.CategoriaPago", b =>
                {
                    b.Navigation("ListaDetallesPagos");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Evento.Evento", b =>
                {
                    b.Navigation("Autorizacion");

                    b.Navigation("EventosMiembros");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Evento.Propietario", b =>
                {
                    b.Navigation("Locacion");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Localidad", b =>
                {
                    b.Navigation("Organismos");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Miembro", b =>
                {
                    b.Navigation("Deuda");

                    b.Navigation("EventosMiembros");

                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Organismo", b =>
                {
                    b.Navigation("Miembros");

                    b.Navigation("Resumen")
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Pago", b =>
                {
                    b.Navigation("Autorizacion");

                    b.Navigation("ListaDetalles");

                    b.Navigation("ModalidadPago")
                        .IsRequired();

                    b.Navigation("Recibo");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Provincia", b =>
                {
                    b.Navigation("Localidades");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Resumen", b =>
                {
                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Usuario", b =>
                {
                    b.Navigation("AutorizacionesEventos");

                    b.Navigation("AutorizacionesPagos");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.UsuarioRol", b =>
                {
                    b.Navigation("Listausuarios");
                });
#pragma warning restore 612, 618
        }
    }
}
