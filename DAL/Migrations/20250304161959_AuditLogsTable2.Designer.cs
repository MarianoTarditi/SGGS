// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(dbContext))]
    [Migration("20250304161959_AuditLogsTable2")]
    partial class AuditLogsTable2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.Identity.Entities.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9b67832b-7091-48e8-aa0a-f1b3baeca418",
                            ConcurrencyStamp = "2912ed0d-8685-4b3d-a61a-7bc9593afef5",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "affedc34-9713-423a-880e-4a61ceefb7b1",
                            ConcurrencyStamp = "d437a563-af24-4bc6-ace0-7ef2f0dc58ac",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = "a086370d-a143-42d2-ad86-1d32eb9e7546",
                            ConcurrencyStamp = "0550b8b0-c278-4d18-9257-702be23f6d43",
                            Name = "External Member",
                            NormalizedName = "EXTERNAL MEMBER"
                        });
                });

            modelBuilder.Entity("Entity.Identity.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "070a9212-d4a9-44da-8479-4ec813b63621",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97ce5ce1-f18d-4cbd-b962-238e84d684d7",
                            Email = "test.video.lesson@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST.VIDEO.LESSON@GMAIL.COM",
                            NormalizedUserName = "TESTADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAENpVJ2K0Bj8nr5NBDxms1ud8itsylnRJ3XqAe0eaC3XVsWOolDwthq68/U4FCM7BIg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5de5b213-f945-452b-960c-12bd7d16d9ea",
                            TwoFactorEnabled = false,
                            UserName = "TestAdmin"
                        },
                        new
                        {
                            Id = "6b0e483c-ebae-4ed3-827e-8ed27f7d9131",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2453699-a38d-4d55-919e-164427736a2d",
                            Email = "test.video.lesson2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TEST.VIDEO.LESSON2@GMAIL.COM",
                            NormalizedUserName = "TESTMEMBER",
                            PasswordHash = "AQAAAAIAAYagAAAAEEA2FWQSTb86kt7FOSXzaHUetxY7hjyeEIwvYdLMtAIGFdpHdyELatGVYNoeEcihlA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "082fadea-885c-4731-82bb-a7ab86759bc6",
                            TwoFactorEnabled = false,
                            UserName = "TestMember"
                        },
                        new
                        {
                            Id = "f906a15b-50f8-4e47-b44f-df9ac87dee9a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "32da5c25-e5f0-4608-9a18-9b8b9ef93386",
                            Email = "jorgemartinez@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JORGEMARTINEZ@GMAIL.COM",
                            NormalizedUserName = "JORGE",
                            PasswordHash = "AQAAAAIAAYagAAAAEFFy1Ic87BR8rQvh6Mfb59QhPIxR+adeeaENxsuJtKE9jqOqnluY5RwyaB/WOO61Tg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e114b4ed-52da-4ec6-bb11-01ac9cddf000",
                            TwoFactorEnabled = false,
                            UserName = "jorge"
                        });
                });

            modelBuilder.Entity("Entity.Identity.Entities.AuidtLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Changes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditsLogs");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.AutorizacionPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Autorizado")
                        .HasColumnType("bit");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("EstadoAutorizacionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("Observacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("EstadoAutorizacionId");

                    b.ToTable("AutorizacionesPagos");

                    b.HasData(
                        new
                        {
                            Id = 1122,
                            Autorizado = true,
                            CreatedDate = "05/05/2025",
                            EstadoAutorizacionId = 1,
                            Fecha = new DateTime(2025, 3, 4, 13, 19, 59, 83, DateTimeKind.Local).AddTicks(2813),
                            Observacion = "Pago Autorizado con exito"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = "05/05/2025",
                            Nombre = "Protagonista"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.CategoriaPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoriaNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("CategoriaPago");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaNombre = "asd",
                            CreatedDate = "05/05/2025"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.DetallePago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaPagoId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal?>("DeudaOriginalAfiliacion")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DeudaOriginalSeguro")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Monto")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Pagoid")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaPagoId");

                    b.HasIndex("Pagoid");

                    b.ToTable("DetallesPagos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaPagoId = 1,
                            CreatedDate = "05/05/2025",
                            DeudaOriginalAfiliacion = 200m,
                            DeudaOriginalSeguro = 100m,
                            Monto = 1000m,
                            Pagoid = 1
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Deuda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("DeudaPendiente")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaVencimiento")
                        .HasColumnType("datetime2");

                    b.Property<int>("MiembroId")
                        .HasColumnType("int");

                    b.Property<decimal>("MontoAfiliacion")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontoSeguroAcompañante")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OrganismoId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("SaldoDebitado")
                        .HasColumnType("bit");

                    b.Property<bool>("Tiene")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("MiembroId")
                        .IsUnique();

                    b.HasIndex("OrganismoId");

                    b.ToTable("Deudas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = "05/05/2025",
                            DeudaPendiente = true,
                            FechaCreacion = new DateTime(2025, 3, 4, 13, 19, 59, 83, DateTimeKind.Local).AddTicks(2669),
                            FechaVencimiento = new DateTime(2025, 3, 4, 13, 19, 59, 83, DateTimeKind.Local).AddTicks(2660),
                            MiembroId = 1,
                            MontoAfiliacion = 1000m,
                            MontoSeguroAcompañante = 2000m,
                            OrganismoId = 1,
                            SaldoDebitado = false,
                            Tiene = true
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Discapacidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Discapacidades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = "05/05/2025",
                            Nombre = "Diselxia"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Educador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("FuncionEducador")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InsigniaMadera")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Educadores");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.EstadoAutorizacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("EstadoAutorizaciones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = "05/05/2025",
                            Estado = "Autorizado"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = "05/05/2025",
                            Estado = "Pendiente"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.EstadoCivil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("EstadoCivil");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = "05/05/2025",
                            Nombre = "Masculino"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = "05/05/2025",
                            Nombre = "Femenino"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = "05/05/2025",
                            Nombre = "X"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Estudio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nivel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Estudio");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = "05/05/2025",
                            Nivel = "asd"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Funcion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Funciones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = "05/05/2025",
                            Nombre = "Protagonista"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Idioma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Idiomas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = "05/05/2025",
                            Nombre = "Español"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Localidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinciaId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("Localidades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = 1,
                            CreatedDate = "05/05/2025",
                            Nombre = "Rojas",
                            ProvinciaId = 1
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Miembro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<int>("CodigoPostal")
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DescripcionDiscapacidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiscapacidadId")
                        .HasColumnType("int");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EstadoCivilId")
                        .HasColumnType("int");

                    b.Property<int?>("EstudioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FuncionId")
                        .HasColumnType("int");

                    b.Property<int>("IdiomaId")
                        .HasColumnType("int");

                    b.Property<bool>("InsigniaMadera")
                        .HasColumnType("bit");

                    b.Property<int>("LocalidadId")
                        .HasColumnType("int");

                    b.Property<int>("NacionalidadId")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganismoId")
                        .HasColumnType("int");

                    b.Property<int?>("RamaId")
                        .HasColumnType("int");

                    b.Property<int>("ReligionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SexoId")
                        .HasColumnType("int");

                    b.Property<double?>("Telefono")
                        .HasColumnType("float");

                    b.Property<string>("Titulo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("DiscapacidadId");

                    b.HasIndex("EstadoCivilId");

                    b.HasIndex("EstudioId");

                    b.HasIndex("FuncionId");

                    b.HasIndex("IdiomaId");

                    b.HasIndex("LocalidadId");

                    b.HasIndex("NacionalidadId");

                    b.HasIndex("OrganismoId");

                    b.HasIndex("RamaId");

                    b.HasIndex("ReligionId");

                    b.HasIndex("SexoId");

                    b.ToTable("Miembros");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Apellido = "Martinez",
                            CategoriaId = 1,
                            CodigoPostal = 2705,
                            CreatedDate = "05/05/2025",
                            DiscapacidadId = 1,
                            Dni = "45621359",
                            Email = "marianotarditi2004@gmail.com",
                            EstadoCivilId = 1,
                            EstudioId = 1,
                            FechaNacimiento = new DateTime(2025, 3, 4, 13, 19, 59, 83, DateTimeKind.Local).AddTicks(2757),
                            FuncionId = 1,
                            IdiomaId = 1,
                            InsigniaMadera = true,
                            LocalidadId = 1,
                            NacionalidadId = 1,
                            Nombre = "Lautaro",
                            OrganismoId = 1,
                            RamaId = 1,
                            ReligionId = 1,
                            SexoId = 1
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.ModalidadPago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("FechaDePago")
                        .HasColumnType("datetime2");

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Observacion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PagoId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("PagoId")
                        .IsUnique();

                    b.ToTable("PagoModalidad", (string)null);

                    b.UseTptMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = "05/05/2025",
                            FechaDePago = new DateTime(2025, 3, 4, 13, 19, 59, 83, DateTimeKind.Local).AddTicks(3076),
                            NombreCompleto = "Mariano Tarditi",
                            Observacion = "Pago hecho con transferencia",
                            PagoId = 1
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Nacionalidad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Nacionalidades");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = "05/05/2025",
                            Pais = "Argentina"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Organismo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<long>("Celular")
                        .HasColumnType("bigint");

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<int>("CodigoPostal")
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Latitud")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocalidadId")
                        .HasColumnType("int");

                    b.Property<string>("Longitud")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("Telefono")
                        .HasColumnType("bigint");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("ValorAfiliacion")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorSeguro")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("LocalidadId");

                    b.ToTable("Organismos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            Celular = 24643456L,
                            Codigo = 1,
                            CodigoPostal = 2705,
                            CreatedDate = "05/05/2025",
                            Descripcion = "Grupo Scout de Entre Rios",
                            Direccion = "Dardo rocha 78",
                            Email = "sggs@gmail.com",
                            FechaCreacion = new DateTime(2025, 3, 4, 13, 19, 59, 83, DateTimeKind.Local).AddTicks(3197),
                            Latitud = "-33.03604633935",
                            LocalidadId = 1,
                            Longitud = "-59.008276462555",
                            Nombre = "San isidrio labrador",
                            Telefono = 24564534L,
                            ValorAfiliacion = 3000m,
                            ValorSeguro = 2000m
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<int>("AutorizacionPagoId")
                        .HasColumnType("int");

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("MiembroId")
                        .HasColumnType("int");

                    b.Property<int>("ResumenId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("TipoModalidad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("AutorizacionPagoId");

                    b.HasIndex("MiembroId");

                    b.HasIndex("ResumenId");

                    b.ToTable("Pagos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Activo = true,
                            AutorizacionPagoId = 1122,
                            Codigo = 1,
                            CreatedDate = "05/05/2025",
                            MiembroId = 1,
                            ResumenId = 1,
                            TipoModalidad = "Efectivo",
                            Total = 10000m
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Provincia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Provincias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = "05/05/2025",
                            Nombre = "Buenos Aires"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = "05/05/2025",
                            Nombre = "Buenos Aires-GBA"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = "05/05/2025",
                            Nombre = "Catamarca"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = "05/05/2025",
                            Nombre = "Chaco"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = "05/05/2025",
                            Nombre = "Chubut"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = "05/05/2025",
                            Nombre = "Córdoba"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = "05/05/2025",
                            Nombre = "Corrientes"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = "05/05/2025",
                            Nombre = "Entre Ríos"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = "05/05/2025",
                            Nombre = "Formosa"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = "05/05/2025",
                            Nombre = "Jujuy"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = "05/05/2025",
                            Nombre = "La Pampa"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = "05/05/2025",
                            Nombre = "La Rioja"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = "05/05/2025",
                            Nombre = "Mendoza"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = "05/05/2025",
                            Nombre = "Misiones"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = "05/05/2025",
                            Nombre = "Neuquén"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = "05/05/2025",
                            Nombre = "Río Negro"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = "05/05/2025",
                            Nombre = "Salta"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = "05/05/2025",
                            Nombre = "San Juan"
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = "05/05/2025",
                            Nombre = "San Luis"
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = "05/05/2025",
                            Nombre = "Santa Cruz"
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = "05/05/2025",
                            Nombre = "Santa Fe"
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = "05/05/2025",
                            Nombre = "Santiago del Estero"
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = "05/05/2025",
                            Nombre = "Tierra del Fuego"
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = "05/05/2025",
                            Nombre = "Tucumán"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Rama", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Rama");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = "05/05/2025",
                            Nombre = "sad"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Recibo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Codigo")
                        .HasColumnType("int");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PagoId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("Total")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("PagoId")
                        .IsUnique()
                        .HasFilter("[PagoId] IS NOT NULL");

                    b.ToTable("Recibos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Codigo = 1012,
                            CreatedDate = "05/05/2025",
                            Fecha = new DateTime(2025, 3, 4, 13, 19, 59, 83, DateTimeKind.Local).AddTicks(2949),
                            PagoId = 1,
                            Total = 3000m
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Religiones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = "05/05/2025",
                            Nombre = "Cristiano"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Resumen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<decimal>("Credito")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CreditoAfiliacion")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CreditoSeguroAcompañante")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Debito")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DebitoAfiliacion")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DebitoSeguroAcompañante")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrganismoId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("SaldoAfiliacion")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SaldoSeguroAcompañante")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SaldoTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("OrganismoId")
                        .IsUnique();

                    b.ToTable("Resumen");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = "05/05/2025",
                            Credito = 1000m,
                            CreditoAfiliacion = 100m,
                            CreditoSeguroAcompañante = 100m,
                            Debito = 500m,
                            DebitoAfiliacion = 100m,
                            DebitoSeguroAcompañante = 100m,
                            OrganismoId = 1,
                            SaldoAfiliacion = 100m,
                            SaldoSeguroAcompañante = 100m,
                            SaldoTotal = 100m
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Sexo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UpdatedDate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Sexos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = "05/05/2025",
                            Nombre = "Masculino"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUserClaim<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUserRole<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Deposito", b =>
                {
                    b.HasBaseType("Entity.WebAplication.Entities.ModalidadPago");

                    b.Property<string>("NumeroCuenta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroOperacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroSucursal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ModalidadDeposito", (string)null);
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Efectivo", b =>
                {
                    b.HasBaseType("Entity.WebAplication.Entities.ModalidadPago");

                    b.ToTable("ModalidadEfectivo", (string)null);
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Transferencia", b =>
                {
                    b.HasBaseType("Entity.WebAplication.Entities.ModalidadPago");

                    b.Property<string>("BancoOrigen")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NroCuentaOrigenFondo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroOperacion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("ModalidadTransferencia", (string)null);
                });

            modelBuilder.Entity("Entity.Identity.Entities.AppUserClaim", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>");

                    b.HasDiscriminator().HasValue("AppUserClaim");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "AdminObserverExpireDate",
                            ClaimValue = "06/11/2023",
                            UserId = "6b0e483c-ebae-4ed3-827e-8ed27f7d9131"
                        });
                });

            modelBuilder.Entity("Entity.Identity.Entities.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.HasDiscriminator().HasValue("AppUserRole");

                    b.HasData(
                        new
                        {
                            UserId = "070a9212-d4a9-44da-8479-4ec813b63621",
                            RoleId = "9b67832b-7091-48e8-aa0a-f1b3baeca418"
                        },
                        new
                        {
                            UserId = "6b0e483c-ebae-4ed3-827e-8ed27f7d9131",
                            RoleId = "affedc34-9713-423a-880e-4a61ceefb7b1"
                        },
                        new
                        {
                            UserId = "f906a15b-50f8-4e47-b44f-df9ac87dee9a",
                            RoleId = "a086370d-a143-42d2-ad86-1d32eb9e7546"
                        });
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.AutorizacionPago", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.EstadoAutorizacion", "EstadoAutorizacion")
                        .WithMany()
                        .HasForeignKey("EstadoAutorizacionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoAutorizacion");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.DetallePago", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.CategoriaPago", "CategoriaPago")
                        .WithMany("ListaDetallesPagos")
                        .HasForeignKey("CategoriaPagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Pago", "Pago")
                        .WithMany("ListaDetalles")
                        .HasForeignKey("Pagoid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoriaPago");

                    b.Navigation("Pago");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Deuda", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Miembro", "Miembro")
                        .WithOne("Deuda")
                        .HasForeignKey("Entity.WebAplication.Entities.Deuda", "MiembroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Organismo", "Organismo")
                        .WithMany("Deudas")
                        .HasForeignKey("OrganismoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Miembro");

                    b.Navigation("Organismo");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Localidad", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Provincia", "Provincia")
                        .WithMany("Localidades")
                        .HasForeignKey("ProvinciaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Provincia");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Miembro", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Discapacidad", "Discapacidad")
                        .WithMany()
                        .HasForeignKey("DiscapacidadId");

                    b.HasOne("Entity.WebAplication.Entities.EstadoCivil", "EstadoCivil")
                        .WithMany()
                        .HasForeignKey("EstadoCivilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Estudio", "Estudio")
                        .WithMany()
                        .HasForeignKey("EstudioId");

                    b.HasOne("Entity.WebAplication.Entities.Funcion", "Funcion")
                        .WithMany()
                        .HasForeignKey("FuncionId");

                    b.HasOne("Entity.WebAplication.Entities.Idioma", "Idioma")
                        .WithMany()
                        .HasForeignKey("IdiomaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Localidad", "Localidad")
                        .WithMany()
                        .HasForeignKey("LocalidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Nacionalidad", "Nacionalidad")
                        .WithMany()
                        .HasForeignKey("NacionalidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Organismo", "Organismo")
                        .WithMany("Miembros")
                        .HasForeignKey("OrganismoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Rama", "Rama")
                        .WithMany()
                        .HasForeignKey("RamaId");

                    b.HasOne("Entity.WebAplication.Entities.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Sexo", "Sexo")
                        .WithMany()
                        .HasForeignKey("SexoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Discapacidad");

                    b.Navigation("EstadoCivil");

                    b.Navigation("Estudio");

                    b.Navigation("Funcion");

                    b.Navigation("Idioma");

                    b.Navigation("Localidad");

                    b.Navigation("Nacionalidad");

                    b.Navigation("Organismo");

                    b.Navigation("Rama");

                    b.Navigation("Religion");

                    b.Navigation("Sexo");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.ModalidadPago", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Pago", "Pago")
                        .WithOne("ModalidadPago")
                        .HasForeignKey("Entity.WebAplication.Entities.ModalidadPago", "PagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pago");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Organismo", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Localidad", "Localidad")
                        .WithMany("Organismos")
                        .HasForeignKey("LocalidadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Localidad");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Pago", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.AutorizacionPago", "Autorizacion")
                        .WithMany("Pagos")
                        .HasForeignKey("AutorizacionPagoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Miembro", "Miembro")
                        .WithMany("Pagos")
                        .HasForeignKey("MiembroId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.WebAplication.Entities.Resumen", "Resumen")
                        .WithMany("Pagos")
                        .HasForeignKey("ResumenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Autorizacion");

                    b.Navigation("Miembro");

                    b.Navigation("Resumen");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Recibo", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Pago", "Pago")
                        .WithOne("Recibo")
                        .HasForeignKey("Entity.WebAplication.Entities.Recibo", "PagoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Pago");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Resumen", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.Organismo", "Organismo")
                        .WithOne("Resumen")
                        .HasForeignKey("Entity.WebAplication.Entities.Resumen", "OrganismoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organismo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Entity.Identity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entity.Identity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entity.Identity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Entity.Identity.Entities.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Identity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entity.Identity.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Deposito", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.ModalidadPago", null)
                        .WithOne()
                        .HasForeignKey("Entity.WebAplication.Entities.Deposito", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Efectivo", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.ModalidadPago", null)
                        .WithOne()
                        .HasForeignKey("Entity.WebAplication.Entities.Efectivo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Transferencia", b =>
                {
                    b.HasOne("Entity.WebAplication.Entities.ModalidadPago", null)
                        .WithOne()
                        .HasForeignKey("Entity.WebAplication.Entities.Transferencia", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.AutorizacionPago", b =>
                {
                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.CategoriaPago", b =>
                {
                    b.Navigation("ListaDetallesPagos");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Localidad", b =>
                {
                    b.Navigation("Organismos");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Miembro", b =>
                {
                    b.Navigation("Deuda");

                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Organismo", b =>
                {
                    b.Navigation("Deudas");

                    b.Navigation("Miembros");

                    b.Navigation("Resumen")
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Pago", b =>
                {
                    b.Navigation("ListaDetalles");

                    b.Navigation("ModalidadPago")
                        .IsRequired();

                    b.Navigation("Recibo");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Provincia", b =>
                {
                    b.Navigation("Localidades");
                });

            modelBuilder.Entity("Entity.WebAplication.Entities.Resumen", b =>
                {
                    b.Navigation("Pagos");
                });
#pragma warning restore 612, 618
        }
    }
}
